class Map:
    def __init__(self,MapNum=1):
        # 벽,테이블 (지나가지 못함) : 1
        # 이동가능 : 0
        # goal(각 테이블 목적지) : 3
        # Start state : (1,1) 
        # 
        self.map1=[
            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1],
            [1,0,1,0,1,3,0,0,0,0,0,0,3,1,0,1,0,0,0,1],
            [1,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1],
            [1,0,1,0,1,3,0,0,0,0,0,0,3,1,0,1,0,0,0,1],
            [1,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1],
            [1,0,1,0,1,3,0,0,0,0,0,0,3,1,0,1,0,0,0,1],
            [1,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
        ]
        self.map2=[
            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
        ]


        self.StartState = (1,1)
        self.table_dict = {
            '1':(4,5),
            '2':(9,5),
            '3':(14,5),
            '4':(4,12),
            '5':(9,12),
            '6':(14,12)
        }
        
        if MapNum == 1:
            self.map = self.map1[:]
        
        if MapNum == 2:
            self.map = self.map2[:]
        
    
    def currentState(self,nodes):
        i,j = nodes
        return self.map[i][j]

    def isGoalState(self,nodes):
        if self.currentState(nodes) == 3:
            return True
        else:
            return False

    
    def getSuccessors(self,node):
        i,j = node
        succ = []

        if self.map[i][j+1] != 1:
            succ.append([(i,j+1),'right'])
        
        if self.map[i-1][j] != 1:
            succ.append([(i-1,j),'up'])

        if self.map[i][j-1] != 1:
            succ.append([(i,j-1),'left'])

        if self.map[i+1][j] != 1:
            succ.append([(i+1,j),'down'])

        return succ






# map = Map()

# print(map.map)
# print(map.currentState((4,5)))
# print(map.isGoalState((4,5)))